#!/bin/bash

# Unofficial Bash Strict Mode
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'

PROGRAM_NAME="$(basename "$0")"

usage() {
    echo_stderr "Usage: ${PROGRAM_NAME} <vault> <command> [profile] [args [...]]" $'\n'
    echo_stderr 'Wraps <command> with "aws-vault exec"' $'\n'
    echo_stderr '  vault:   the vault to wrap, e.g. aws-vault or aws-okta'
    echo_stderr '  command: binary to run with AWS creds, e.g. terraform or aws'
    echo_stderr '  profile: AWS profile (defaults to AWS_PROFILE if missing)'
    echo_stderr '           If "--", uses AWS_PROFILE or AWS_DEFAULT_PROFILE'
    echo_stderr '           If omitted/invalid, uses AWS_PROFILE only'
    echo_stderr '  args:    command-line arguments to pass to <command>' $'\n'
    echo_stderr 'Examples'
    echo_stderr '  --> Set up an alias for quick AWS CLI usage:'
    echo_stderr "      alias vaws='${PROGRAM_NAME} aws-vault aws'" $'\n'
    echo_stderr '      vaws staging s3 ls'
    echo_stderr '      => aws-vault exec staging -- aws s3 ls' $'\n'
    echo_stderr '      vaws prod s3 ls'
    echo_stderr '      => aws-vault exec prod -- aws s3 ls' $'\n'
    echo_stderr '      vaws prod-admin s3 rm ...'
    echo_stderr '      => aws-vault exec prod-admin -- aws s3 rm ...' $'\n\n'
    echo_stderr '  --> Use a different vault (aws-okta instead of aws-vault):'
    echo_stderr "      alias oaws='${PROGRAM_NAME} aws-okta aws'" $'\n'
    echo_stderr '      oaws staging s3 ls'
    echo_stderr '      => aws-okta exec staging -- aws s3 ls' $'\n'
    echo_stderr '  --> Different command (stack_master instead of AWS CLI):'
    echo_stderr "      alias sm='${PROGRAM_NAME} aws-vault \"bundle exec stack_master\"'" $'\n'
    echo_stderr '      sm staging diff ...'
    echo_stderr '      => aws-vault exec staging -- bundle exec stack_master diff ...' $'\n'
    echo_stderr '      sm staging-admin apply ...'
    echo_stderr '      => aws-vault exec staging-admin -- bundle exec stack_master apply ...' $'\n'
}

main() {
    # Validate CLI arguments, short-circuit for help
    [[ $# -ge 3 ]] || abort 1 "$(usage)"

    local aws_vault="$1" command="$2"
    shift 2

    [[ "$1" =~ ^(-h|--help)$ ]] && abort 0 "$(usage)"

    # Determine known AWS profile names
    local known_profiles profile='' profile_source=''
    IFS=$'\n' read -r -d $'\0' -a known_profiles < <(list_profiles) || :

    # Take profile from:
    # if the arg is "--", AWS_PROFILE -> AWS_DEFAULT_PROFILE -> error
    # elif the arg is a profile, use that value
    # else AWS_PROFILE -> error
    if [[ "$1" == '--' ]]; then
        # Asked to guess, fail if we can't
        if [[ "${AWS_PROFILE:-}" ]]; then
            profile="${AWS_PROFILE}"
            profile_source="\$AWS_PROFILE"
        elif [[ "${AWS_DEFAULT_PROFILE:-}" ]]; then
            profile="${AWS_DEFAULT_PROFILE}"
            profile_source="\$AWS_DEFAULT_PROFILE"
        else
            abort 2 "No AWS_PROFILE (or AWS_DEFAULT_PROFILE) in environment"
        fi
        shift
    elif array_contains "$1" "${known_profiles[@]}"; then
        profile="$1"
        profile_source='command-line'
        shift
    elif [[ "${AWS_PROFILE:-}" ]]; then
        profile="${AWS_PROFILE}"
        profile_source="\$AWS_PROFILE"
    else
        abort 2 "No AWS_PROFILE in environment, and '$1' is not a known profile"
    fi

    # Validate that the final selected profile is a valid known profile name
    if ! array_contains "${profile}" "${known_profiles[@]}"; then
        abort 3 "Unknown AWS profile '${profile}' (from $profile_source)",
            $'\n'"(check '${aws_vault} list')"
    fi

    # Prefix the command with "aws-vault exec PROFILE -- ..."
    IFS=$'\n\t '
    local -a wrapped_command=("${aws_vault}" exec "${profile}" -- $command "$@")
    echo >&2 '=>' "$(printf '%q ' "${wrapped_command[@]}")"
    exec "${wrapped_command[@]}"
}

# Extracts profiles from AWS config, printing each profile separated by newlines
list_profiles() {
    local aws_config_file="${AWS_CONFIG_FILE:-${HOME}/.aws/config}"

    # Create a regular expression pattern to match profiles in the config
    local s='[[:space:]]'
    local alnum='[[:alnum:]_-]'
    local pattern="^${s}*\[${s}*profile${s}+(${alnum}+)${s}*\]${s}*$"

    # tell sed to search for pattern, replace it with first capture, and print
    local sed_script="s/${pattern}/\1/p"

    # -n: suppress automatic printing of pattern space
    # -E: use  extended regular expressions in the script
    sed -En "${sed_script}" "${aws_config_file}"
}

# Prints arguments to stderr
echo_stderr() {
    echo >&2 "$@"
}

# Prints a message to stderr and exits with a given status code
#
# Usage: abort [status] <message ...>
# Example: abort 1 Unknown error occurred
abort() {
    local status=1

    if [[ $# -ge 2 && $1 =~ ^[0-9]+$ ]]; then
        status="$1"
        shift
    fi

    echo_stderr "$@"
    exit "${status}"
}

# Determines if an array contains a value or not
#
# Usage: array_contains "${needle}" "${haystack[@]}"
# Example: array_contains "--help" "$@" && print_help_and_exit
array_contains() {
    local element pattern="$1"
    [[ "$pattern" ]] || return 1
    shift
    for element; do [[ "$element" == "$pattern" ]] && return 0; done
    return 1
}

main "$@"
